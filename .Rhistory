else {
sampleGroups <- as.factor(sampleGroups)
sg <- as.numeric(sampleGroups) - 1
interact <- factor(as.numeric(isofac) * as.numeric(sg))
mdi <- data.frame(y, indiv, isofac, covs, interact, mystrata = mystrata)
vec <- c(c(1, rep(0, niso)), c(0, rep(1, niso)))
Ai <- matrix(vec, nrow = 2, byrow = T)
covars = NULL
nfeatmax = 100
onlyhyper = FALSE
ind.random = TRUE
strata = NULL
randomprec = c(1, 0.001)
keep = NULL
effoutput = T
ZI = FALSE
ar = FALSE
ar.int = FALSE
verbosity = -1
nsam <- nrow(data)
sampleGroups <- as.factor(sampleGroups)
isosel <- data[, indices]
indiv <- rep(1:nsam, niso)
isofac <- factor(sort(rep(1:niso, nsam)))
if (!is.null(offsets))
covars <- cbind(covars, offs = offsets)
if (is.null(covars)) {
covars2 <- data.frame(sampleGroups)
}
else {
if (is.null(covars)) {
covars2 <- data.frame(sampleGroups)
}
else {
covs <- data.table::rbindlist(lapply(1:niso, function(i) covars2))
if (!is.null(offsets))
covars <- cbind(covars, offs = offsets)
if (is.null(covars)) {
covars2 <- data.frame(sampleGroups)
}
else {
covars <- cbind(covars, offs = offsets)
covars2 <- data.frame(sampleGroups, covars)
covs <- data.table::rbindlist(lapply(1:niso, function(i) covars2))
y <- as.numeric(unlist(isosel))
if (!is.null(strata)) {
stratagene <- factor(as.character(strata[indices]))
nlev <- length(levels(stratagene))
if (nlev > 1) {
mm <- model.matrix(~0 + stratagene)
wh0 <- which(mm == 0, arr.ind = TRUE)
mm2 <- mm
mm2[wh0] <- NA
mm3 <- mm2 %x% rep(1, nsam)
y <- as.matrix(mm3 * y)
}
mystrata <- factor(matrix(as.numeric(stratagene), ncol = 1) %x%
rep(1, nsam))
}
covs <- data.table::rbindlist(lapply(1:niso, function(i) covars2))
y <- as.numeric(unlist(isosel))
mystrata <- factor(rep(1, nsam * niso))
sampleGroups <- as.factor(sampleGroups)
sg <- as.numeric(sampleGroups) - 1
interact <- factor(as.numeric(isofac) * as.numeric(sg))
mdi <- data.frame(y, indiv, isofac, covs, interact, mystrata = mystrata)
vec <- c(c(1, rep(0, niso)), c(0, rep(1, niso)))
Ai <- matrix(vec, nrow = 2, byrow = T)
pmt <- proc.time()
nstrat <- length(levels(mdi$mystrata))
if (ZI)
fams <- rep("zeroinflatednbinomial1", nstrat)
inlaY <- mdi[, 1:nstrat]
assign("inlaY", inlaY, envir = globalenv())
mdi2 <- mdi[, -(1:nstrat)]
?inlai.par
inlai.par
dataTest <- CountDEU[[3]]
offsTest <-calcOffs(dataTest,outdir='')
for (k in 1:length(partitionGenes)){
k<-3
print(k)
dataGene <- dataTest[partitionGenes[[k]],]
GeneTest <- vector(mode='list', length=1)
GeneTest[[1]] <- 1:nrow(dataGene)
names(GeneTest) <- names(partitionGenes)[k]
res <- inlai.par(data=t(dataGene), featureGroups = GeneTest[[1]], sampleGroups = sampleData$condition, par.method = 'sequential',offsets= offsTest,ar=T,verbosity=0,ncpus=1)
}
dataTest <- CountDEU[[3]]
offsTest <-calcOffs(dataTest,outdir='')
for (k in 1:length(partitionGenes)){
print(k)
dataGene <- dataTest[partitionGenes[[k]],]
GeneTest <- vector(mode='list', length=1)
GeneTest[[1]] <- 1:nrow(dataGene)
names(GeneTest) <- names(partitionGenes)[k]
res <- inlai.par(data=t(dataGene), featureGroups = GeneTest[[1]], sampleGroups = sampleData$condition, par.method = 'sequential',offsets= offsTest,ar=T,verbosity=0,ncpus=1)
}
traceback
traceback()
source( "setup/MedStat_setup.R" );
#plotting probability discrete uniform distribution
x <- c(1:6)
y <- rep(1/6,6)
plot(x,y,type="h",xlim=c(1,6),ylim=c(0,1),lwd=2,col="blue",ylab="p")
points(x,y,pch=16,cex=2,col="blue")
#plotting probability Bernoulli distribution
x <- c(0:1)
y <- c(2/3,1/3)
plot(x,y,type="h",xlim=c(0,1),ylim=c(0,1),lwd=2,col="blue",ylab="p")
points(x,y,pch=16,cex=2,col="blue")
#plotting probability binomial distribution
x <- c(0:10)
y <- dbinom( x, 10, 1/3)
plot(x,y,type="h",xlim=c(0,10),ylim=c(0,1),lwd=2,col="blue",ylab="p")
points(x,y,pch=16,cex=2,col="blue")
#Plot the density
curve(dunif(x, min= 0, max= 1), col="blue", from = 0, to = 1 )
#Plot the density and quartiles
curve(dunif(x, min= 0, max= 1), col="blue", from = 0, to = 1 )
abline(v = qunif(c(0.25, 0.5, 0.75), min= 0, max= 1), col= 'darkred')
#Plot of the density and important quantiles
#of a continuous uniform distribution
curve(dunif(x, min= 0, max= 1), col="blue", from = 0, to = 1 )
mcol <- 'darkred'
abline(v = qunif(c(0.025, 0.975), min= 0, max= 1), col= mcol)
text(0.1, 1.1, col = mcol, labels = "0.025")
text(0.9, 1.1, col = mcol, labels = "0.975")
mcol <- 'purple'
abline(v = qunif(c(0, 0.95), min= 0, max= 1), col= mcol)
text(0.15, 1.2, col = mcol, labels = "0")
text(0.85, 1.2, col = mcol, labels = "0.95")
mcol <- 'darkorange'
abline(v = qunif(c(0.05, 1), min= 0, max= 1), col= mcol)
text(0.2, 1.3, col = mcol, labels = "0.05")
text(0.8, 1.3, col = mcol, labels = "1")
1:10
#Plot of the density and quantiles of a normal distribution
curve(dnorm(x, mean = 0, sd = 1), col = 'blue', from = -5, to = 5)
abline(v = qnorm(c(0.25, 0.75), mean = 0, sd = 1), col= 'darkgreen')
abline(v = qnorm(c(0.025, 0.975), mean = 0, sd = 1), col= 'darkred')
abline(v = qnorm(c(0, 0.95), mean = 0, sd = 1), col= 'purple')
abline(v = qnorm(c(0.05, 1), mean = 0, sd = 1), col= 'darkorange')
curve(dgamma(x, shape = 1, rate = 1), from = 0, to = 5, col= 'blue'
, ylab= 'density')
mean.samples <- NULL
for (k in 1:500){
data.sample <- rgamma( 30 , shape = 1, rate = 1)
mean.samples <- c(mean.samples, mean(data.sample))
}
hist(mean.samples, col='blue')
#Plot of the density and quantiles of a chi square distribution
#with 1 degree of freedom
curve(dchisq(x, df = 1), col = 'blue', from = 0, to = 5)
abline(v = qchisq(c(0.25, 0.75), df = 1), col= 'darkgreen')
abline(v = qchisq(c(0.025, 0.975), df = 1), col= 'darkred')
par(mfrow = c(1, 3))
x <- seq(from = -5, to = 5, by = .1)
curve(dt(x, df = 1), col = 'purple', from = -10, to = 10,
main = "t with 1 d.f.",
ylim = c(0, 0.4), ylab = "")
lines(x, dnorm(x, mean = 0, sd = 1), col = 'black')
legend("topleft", legend = c("normal", "t"), lty = "solid"
,
col = c("black", "purple"))
curve(dt(x, df = 10), col = 'purple', from = -10, to = 10,
main = "t with 10 d.f.", ylab = "")
lines(x, dnorm(x, mean = 0, sd = 1), col = 'black')
legend("topleft", legend = c("normal", "t"), lty = "solid", col = c("black", "purple"))
curve(dt(x, df = 30), col = 'purple', from = -10, to = 10,
main = "t with 30 d.f.", ylab = "")
lines(x, dnorm(x, mean = 0, sd = 1), col = 'black')
legend("topleft", legend = c("normal", "t"), lty = "solid",
col = c("black", "purple"))
library(factoextra)
data(decathlon2)
# Display a description of the dataset
str(decathlon2)
# Display the first lines of the table
head(decathlon2)
set.seed(352)
sample.size<-60
scoreX <- rnorm(sample.size, mean = 5, sd = 1.2)
scoreY <- rgamma(sample.size, shape = 2, scale = 1)
group <- rep(c('A', 'B'), each = sample.size/2)
dataset <- data.frame(scoreX = scoreX, scoreY = scoreY,
group = group, stringsAsFactors = T)
#plot the histogram of a variable
hist(dataset$scoreX, col = 'blue')
#plot the histogram of a variable
hist(dataset$scoreY, col='blue')
#plot the histograms of scoreX for both groups with added density
par(mfrow = c(1,2))
hist(data.A$scoreX, col = 'blue', prob = TRUE,
main = 'histogram scoreX group A', ylim = c(0, 0.4), xlim= c(1, 8))
#plot the histograms of scoreX for both groups with added density
par(mfrow = c(1,2))
hist(data.A$scoreX, col = 'blue', prob = TRUE,
main = 'histogram scoreX group A', ylim = c(0, 0.4), xlim= c(1, 8))
#Creation dataset group A
data.A <- dataset[dataset$group == 'A',]
#Creation dataset group B
data.B <- dataset[dataset$group == 'B',]
#plot the histograms of scoreX for both groups
par(mfrow = c(1,2))
hist(data.A$scoreX, col = 'blue', main = 'histogram scoreX group A' )
hist(data.B$scoreX, col = 'blue', main = 'histogram scoreX group B' )
#plot the histograms of scoreX for both groups with added density
par(mfrow = c(1,2))
hist(data.A$scoreX, col = 'blue', prob = TRUE,
main = 'histogram scoreX group A', ylim = c(0, 0.4), xlim= c(1, 8))
x <- seq(from = -5, to = 15, by = .1)
lines(x, dnorm(x, mean = 5, sd = 1.2), col = 'red', lwd = 2)
hist(data.B$scoreX, col = 'blue', prob = TRUE,
main = 'histogram scoreX group B', ylim = c(0, 0.4), xlim= c(1, 8) )
lines(x, dnorm(x, mean = 5, sd = 1.2), col = 'red', lwd = 2)
#Boxplot of a variable
boxplot(dataset$scoreY, col = 'blue', ylab = 'scoreY')
#Boxplot of a variable for different gruops
boxplot(dataset$scoreY ~ dataset$group, col = 'blue', ylab = 'scoreY'
, xlab = 'group')
#Creation dataset group A containing only scoreX and scoreY
data.A <- dataset[dataset$group == 'A', c('scoreX', 'scoreY')]
#Creation dataset group B containing only scoreX and scoreY
data.B <- dataset[dataset$group == 'B', c('scoreX', 'scoreY')]
#Computation of the mean for each variable of the dataset for group A
mean.variables.groupA <- apply(data.A, 2, mean, na.rm=T)
mean.variables.groupA
data.A
#Computation of the mean for each variable of the dataset for group B
mean.variables.groupB <- apply(data.B, 2, mean, na.rm=T)
mean.variables.groupB
#Computation of the standard deviation for both variables
#of the dataset in group A
sd.variables.groupA <- apply(data.A, 2, sd, na.rm=T)
sd.variables.groupA
#Computation of the standard deviation for both variables
#of the dataset in group B
sd.variables.groupB <- apply(data.B, 2, sd, na.rm=T)
sd.variables.groupB
1:10
c(1:9, 100)
#computation of the median for both variables in group A
median.variables.groupA <- apply(data.A, 2, median, na.rm = T)
median.variables.groupA
#computation of the median for both variables in group B
median.variables.groupB <- apply(data.B, 2, median, na.rm = T)
median.variables.groupB
curve(dnorm(x,0,1),col='blue')
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.2,y=0.15,'sd')
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.2,y=0.11,'sd',col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
abline(v=0, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
?text
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(dnorm(x, mean = 0, sd = 2),col ='red', from = -5, to = 5)
abline(v = 0, col = 'red')
segments(x0 = 0, y0 = 0.05, x1 = 2, y1 = 0.05, col = 'red')
text(x = 1.4, y = 0.07, labels = 'sd', col = 'red')
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(dnorm(x, mean = 0, sd = 2),col ='red')
abline(v = 0, col = 'red')
segments(x0 = 0, y0 = 0.05, x1 = 2, y1 = 0.05, col = 'red')
text(x = 1.4, y = 0.07, labels = 'sd', col = 'red')
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,drnorm(x, mean = 0, sd = 2),col ='red'))
curve(dnorm(x,0,1),col='blue', from=-5,to = 5)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,dnorm(x, mean = 0, sd = 2),col ='red')
abline(v = 0, col = 'red')
segments(x0 = 0, y0 = 0.05, x1 = 2, y1 = 0.05, col = 'red')
text(x = 1.4, y = 0.07, labels = 'sd', col = 'red')
curve(dnorm(x,0,1),col='blue', from=-5,to = 15)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,dnorm(x, mean = 5, sd = 1),col ='red')
abline(v = 0, col = 'red')
segments(x0 = 5, y0 = 0.05, x1 = 6, y1 = 0.05, col = 'red')
text(x = 1.4, y = 0.07, labels = 'sd', col = 'red')
curve(dnorm(x,0,1),col='blue', from=-5,to = 15)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,dnorm(x, mean = 5, sd = 1),col ='red')
abline(v = 5, col = 'red')
segments(x0 = 5, y0 = 0.05, x1 = 6, y1 = 0.05, col = 'red')
text(x = 1.4, y = 0.07, labels = 'sd', col = 'red')
curve(dnorm(x,0,1),col='blue', from=-5,to = 15)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,dnorm(x, mean = 5, sd = 1),col ='red')
abline(v = 5, col = 'red')
segments(x0 = 5, y0 = 0.05, x1 = 6, y1 = 0.05, col = 'red')
text(x = 6.4, y = 0.07, labels = 'sd', col = 'red')
curve(dnorm(x,0,1),col='blue', from=-5,to = 10)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,dnorm(x, mean = 5, sd = 1),col ='red')
abline(v = 5, col = 'red')
segments(x0 = 5, y0 = 0.05, x1 = 6, y1 = 0.05, col = 'red')
text(x = 6.4, y = 0.07, labels = 'sd', col = 'red')
curve(dnorm(x,0,1),col='blue', from=-5,to = 10)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,dnorm(x, mean = 5, sd = 1),col ='red')
abline(v = 5, col = 'red')
segments(x0 = 5, y0 = 0.1, x1 = 6, y1 = 0.1, col = 'red')
text(x = 6.4, y = 0.12, labels = 'sd', col = 'red')
curve(dnorm(x,0,1),col='blue', from=-5,to = 10)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,dnorm(x, mean = 5, sd = 1),col ='red')
abline(v = 5, col = 'red')
segments(x0 = 5, y0 = 0.1, x1 = 6, y1 = 0.1, col = 'red')
text(x = 6.4, y = 0.12, labels = 'sd', col = 'red')
abline(v = 2.5, col = 'darkgreen')
group1 <- rnorm(500, mean = 0, sd = 1)
group2 <- rnorm(500, mean = 5, sd = 1)
mean(group1)
mean(group2)
mean(c(group1,group2))
set.seed(42)
group1 <- rnorm(500, mean = 0, sd = 1)
group2 <- rnorm(500, mean = 5, sd = 1)
m.g1 <- mean(group1)
m.g1
m.g2 <- mean(group2)
m.g2
m.gs <- mean(c(group1,group2))
m.gs
sd.g1 <- sd(group1)
sd.g1
sd.g2 <- sd(group2)
sd.g2
sd.gs <- sd(c(group1,group2))
sd.gs
pooled.sd <- sqrt((499*sd.g1^{2} + 499*sd.g2^{2})/(499+499))
pooled.sd
curve(dnorm(x,0,1),col='blue', from=-5,to = 10)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd',col='blue')
lines(x,dnorm(x, mean = 5, sd = 1),col ='red')
abline(v = 5, col = 'red')
segments(x0 = 5, y0 = 0.1, x1 = 6, y1 = 0.1, col = 'red')
text(x = 6.4, y = 0.12, labels = 'sd', col = 'red')
abline(v = 2.5, col = 'darkgreen')
segments(x0 = 2.5, y0 = 0.05, x1 = 5.2, y1 = 0.05, col= 'darkgreen' )
curve(dnorm(x,0,1),col='blue', from=-5,to = 10)
abline(v=0, col='blue')
segments(x0=0,y0=0.1,x1=1,y1=0.1, col='blue')
text(x=0.4,y=0.12,'sd.g1',col='blue')
lines(x,dnorm(x, mean = 5, sd = 1),col ='red')
abline(v = 5, col = 'red')
segments(x0 = 5, y0 = 0.1, x1 = 6, y1 = 0.1, col = 'red')
text(x = 5.4, y = 0.12, labels = 'sd.g2', col = 'red')
abline(v = 2.5, col = 'darkgreen')
segments(x0 = 2.5, y0 = 0.05, x1 = 5.2, y1 = 0.05, col= 'darkgreen' )
text(x = 3.4, y = 0.07, labels = 'sd.gs', col = 'darkgreen')
library(factoextra)
data(decathlon2)
set.seed(352)
sample.size<-30
variableX.A <- rnorm(sample.size, mean = 2, sd = 1)
variableX.B <- rnorm(sample.size, mean = 2.4, sd = 1.1)
variableY.A <- rgamma(sample.size, shape = 2, scale = 1)
variableY.B <- rgamma(sample.size, shape = 2, scale = 1.1)
group <- rep(c('A', 'B'), each = sample.size)
dataset <- data.frame(VariableX = c(variableX.A, variableX.B),
VariableY = c(variableY.A, variableY.B),
group = group, stringsAsFactors = T)
#Boxplots for variable X and Y
par(mfrow=c(1,2))
boxplot(dataset$VariableX ~ dataset$group, col = 'blue')
boxplot(dataset$VariableY ~ dataset$group, col = 'blue')
#t-test for VariableX
test.variableX <- t.test(dataset$VariableX ~ dataset$group)
test.variableX
curve(dt(x, df = test.variableX$parameter), col = 'blue', from = -10,
to = 10, ylab = 'density')
abline(v = qt(c(0.025, 0.975), df = test.variableX$parameter),
col = 'red')
abline(v = test.variableX$statistic, col= 'green')
low.boundary <- test.variableX$estimate[1] - test.variableX$estimate[2] -
qt(0.975, df = test.variableX$parameter)*test.variableX$stderr
high.boundary <- test.variableX$estimate[1] - test.variableX$estimate[2] +
qt(0.975, df = test.variableX$parameter)*test.variableX$stderr
c(low.boundary, high.boundary)
wilcox.test(dataset$VariableY ~ dataset$group, alternative = "two.sided")
catLinkTaskSection("_book/01-comparing-2-groups.Rmd" );
library(factoextra)
data(decathlon2)
set.seed(352)
#Creation dataset
variableX.A <- rnorm(10, mean = 0, sd =1)
variableX.B <- rnorm(10, mean = 2, sd =1)
variableY.A <- rnorm(10, mean = 0, sd =1)
variableY.B <- rnorm(10, mean = 0.3, sd =1)
dataset <- data.frame(VariableX = c(variableX.A, variableX.B),
VariableY = c(variableY.A, variableY.B),
group = c(rep('A', 10), rep('B',10)))
t.test(VariableX ~ group, data = dataset)
t.test(VariableY ~ group, data = dataset)
t.test(VariableX ~ group, data = dataset)
t.test(VariableY ~ group, data = dataset)
mean.Decastar <- mean(decathlon2$Long.jump[decathlon2$Competition == 'Decastar'])
library(factoextra)
data(decathlon2)
mean.Decastar <- mean(decathlon2$Long.jump[decathlon2$Competition == 'Decastar'])
mean.OlympicGames <- mean(decathlon2$Long.jump[decathlon2$Competition == 'OlympicG'])
mean.diff <- mean.Decastar - mean.OlympicGames
standard.deviation.Decastar <- sd(decathlon2$Long.jump[decathlon2$Competition == 'Decastar'])
standard.deviation.OlympicGames <- sd(decathlon2$Long.jump[decathlon2$Competition == 'OlympicG'])
samplesize.Decastar <- sum(decathlon2$Competition == 'Decastar')
samplesize.OlympicGames <- sum(decathlon2$Competition == 'OlympicG')
power.analysis <- pwr.t2n.test(n1 = samplesize.Decastar, n2 = samplesize.OlympicGames, d = mean.diff/standard.deviation, sig.level = 0.05, power = NULL,alternative = c("two.sided"))
mean.Decastar <- mean(decathlon2$Long.jump[decathlon2$Competition == 'Decastar'])
mean.OlympicGames <- mean(decathlon2$Long.jump[decathlon2$Competition == 'OlympicG'])
mean.diff <- mean.Decastar - mean.OlympicGames
standard.deviation.Decastar <- sd(decathlon2$Long.jump[decathlon2$Competition == 'Decastar'])
standard.deviation.OlympicGames <- sd(decathlon2$Long.jump[decathlon2$Competition == 'OlympicG'])
samplesize.Decastar <- sum(decathlon2$Competition == 'Decastar')
samplesize.OlympicGames <- sum(decathlon2$Competition == 'OlympicG')
pooled.standard.d <- function(sd.g1,sd.g2,n1,n2){
pooled <- sqrt(((n1-1)*sd.g1^{2} + (n2-1)*sd.g2^{2})/(n1+n2-2))
}
pooled.sd <- pooled.standard.d(sd.g1=standard.deviation.Decastar, sd.g2=standard.deviation.OlympicGames, n1=samplesize.Decastar, n2=samplesize.OlympicGames)
pooled.sd
power.analysis <- pwr.t2n.test(n1 = samplesize.Decastar, n2 = samplesize.OlympicGames, d = mean.diff/pooled.sd, sig.level = 0.05, power = NULL,alternative = c("two.sided"))
library(pwr)
power.analysis <- pwr.t2n.test(n1 = samplesize.Decastar, n2 = samplesize.OlympicGames, d = mean.diff/pooled.sd, sig.level = 0.05, power = NULL,alternative = c("two.sided"))
power.analysis
pwr.t.test(n = NULL, d = mean.diff/pooled.sd, sig.level = 0.05, power = 0.8, alternative = c("two.sided"))
pwr.t.test(n = NULL, d = mean.diff/pooled.sd, sig.level = 0.05, power = 0.9, alternative = c("two.sided"))
pooled.sd.2 <- pooled.sd/2
pwr.t.test(n = NULL, d = mean.diff/pooled.sd.2, sig.level = 0.05, power = 0.8, alternative = c("two.sided"))
pwr.t.test(n = NULL, d = mean.diff/pooled.sd.2, sig.level = 0.05, power = 0.9, alternative = c("two.sided"))
data(mtcars)
str(mtcars)
head(mtcars)
data(mtcars)
str(mtcars)
head(mtcars,n=5)
hist(mtcars$mpg)
hist(mtcars$disp)
hist(mtcars$hp)
hist(mtcars$drat)
hist(mtcars$drat)
hist(mtcars$wt)
hist(mtcars$qsec)
hist(mtcars$mpg)
hist(mtcars$disp)
hist(mtcars$hp)
hist(mtcars$drat)
hist(mtcars$drat)
hist(mtcars$wt)
hist(mtcars$qsec)
boxplot(qsec ~ vs, data = mtcars)
boxplot(qsec ~ am, data = mtcars)
boxplot(qsec ~ vs:am, data = mtcars)
#the plot present the observations for each combination of groups. Consequently, the data are splited in 4 instead of 2 for the previous boxplots leading to different results.
mcars.continuous <- mtcars[, c('mpg', 'disp', 'hp', 'drat', 'wt', 'qsec')]
mean.variables <- apply(mcars.continuous, 2, mean)
mean.variables
sd.variables <- apply(mcars.continuous, 2, sd)
sd.variables
data.corr <- mtcars[,-which(colnames(mtcars) %in%c('am', 'vs'))]
cor.pearson <- cor (data.corr, use = 'complete.obs', method = 'pearson')
cor.spearman <- cor (data.corr, use = 'complete.obs', method = 'spearman')
cor.kendall <- cor (data.corr, use = 'complete.obs', method = 'kendall')
library(gplots)
heatmap.2(cor.pearson, trace = 'none', cexRow = 0.8, cexCol = 0.8, col= colorRampPalette(c("blue","white","red"))(20))
heatmap.2(cor.spearman, trace = 'none', cexRow = 0.8, cexCol = 0.8, col= colorRampPalette(c("blue","white","red"))(20))
heatmap.2(cor.kendall, trace = 'none', cexRow = 0.8, cexCol = 0.8, col= colorRampPalette(c("blue","white","red"))(20))
library(FactoMineR)
library(gplots)
library(factoextra)
pca.analysis <- PCA(mtcars, scale.unit = TRUE, graph = FALSE)
fviz_eig(pca.analysis, addlabels = TRUE, ylim = c(0, 50))
data(ToothGrowth)
ToothGrowth
?ToothGrowth
